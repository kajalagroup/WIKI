[{"id":0,"href":"/wiki/posts/customizing-django-admin-search/","title":"Customizing Django Admin search","section":"Posts","content":"Steps to override search form in Django admin:\n Add custom search form Override ChangeList and implement get_filters_params() so that it excludes the new search form fields (otherwise filters don\u0026rsquo;t work) Override search_form.html because it has hardcoded single search form field Override change_list.html to customize styling (e.g. with flexbox) If search form has many fields, split fields to multiple divs by using cl.search_form.visible_fields|slice:\u0026ldquo;0:5\u0026rdquo; and rendering fields manually  "},{"id":1,"href":"/wiki/posts/avoid-settings-in-models/","title":"Using settings.XXX as defaults in model fields","section":"Posts","content":"When you have settings.XXXX defined in settings.py, and if you use it in a model e.g.\n country = CharField(max_length=3, default=settings.COUNTRY)  .. makemigrations will generate alter-field migration always if you change COUNTRY. This can be problem if you have multiple instances of the app deployed with different COUNTRY setting.\nBetter way is to use function to abstract away actual value:\n def get_system_country() -\u0026gt; str: return settings.COUNTRY ... country = CharField(max_length=3, default=get_system_country)  This will generate only one migration even if you change the COUNTRY in settings.\n"},{"id":2,"href":"/wiki/posts/export-list-view-to-excel/","title":"Export list view in Django admin to Excel file","section":"Posts","content":"The goal is whaterver data is changed in list view by (search, filter, sort ) and you can export result list in same view as you see and you don\u0026rsquo;t need to manually code every column and data in Excel file.\nFirstly, create share mixin to export to Excel file\nfrom jutil.openpyxl_helpers import rows_to_workbook from uuid import uuid1 from django.utils.text import capfirst class ExportExcelMixin: \u0026#34;\u0026#34;\u0026#34; Export current result list to Excel file with data is same as list view. \u0026#34;\u0026#34;\u0026#34; def get_head(self): map_field_label = {} head_row = [] for f in self.export_model._meta.fields: # type : ignore if hasattr(f, \u0026#34;verbose_name\u0026#34;): map_field_label[f.name] = f.verbose_name for column in self.list_display: # type: ignore if column in map_field_label: head_row.append(capfirst(map_field_label[column])) else: method_to_call = getattr(self, column) head_row.append(capfirst(method_to_call.short_description)) return head_row def get_data_rows(self, query_set, ): rows = [] for model in query_set: item = [] for column in self.list_display: # type: ignore if hasattr(model, column): item.append(getattr(model, column)) else: method_to_call = getattr(self, column) item.append(method_to_call(model)) rows.append(item) return rows def admin_export_excel(self, request): cl = self.get_changelist_instance(request) # type: ignore queryset = cl.get_queryset(request) keys = self.get_head() rows = [keys] rows = rows + self.get_data_rows(queryset) wb = rows_to_workbook(rows) download_file_name = f\u0026#34;{settings.WEBSITE_NAME}-{self.export_model._meta.verbose_name}-{now().date()}.xlsx\u0026#34; # type: ignore real_filename = f\u0026#34;/tmp/{uuid1}.xlsx\u0026#34; wb.save(real_filename) with open(real_filename, \u0026#34;rb\u0026#34;) as fh: response = HttpResponse(fh.read(), content_type=\u0026#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\u0026#34;) response[\u0026#34;Content-Disposition\u0026#34;] = f\u0026#34;inline; filename={download_file_name}\u0026#34; return response Secondly, add that Mixin class to admin class that you want to export list view and define export Model and overide get_url method\nFor example:\nclass PostAdmin(admin.ModelAdmin, ExportExcelMixin): export_model = Post def get_urls(self): return [ re_path( r\u0026#34;^export-excel/$\u0026#34;, self.admin_site.admin_view(self.admin_export_excel), name=\u0026#34;post_export_excel\u0026#34;, ), ] + super().get_urls() Next, you define web filter called \u0026ldquo;append_get_params\u0026rdquo;, the purpose is append all search params and filter params and sort param to specific give url\nfrom urllib.parse import urlparse, urlencode, urlunparse from django.template.defaultfilters import register @register.simple_tag(takes_context=True) def append_get_params(context, url): \u0026#34;\u0026#34;\u0026#34; Append all GET params to passed url \u0026#34;\u0026#34;\u0026#34; request = context.get(\u0026#39;request\u0026#39;) parsed_url = list(urlparse(url)) parsed_url[4] = urlencode(request.GET) return urlunparse(parsed_url) Finally, you need to verride changelist.html for that Admin model to add export link For example post model in my app that templated will be located at( or you need to create it)\nmy/templates/admin/my/post/change_list.html Here is the code for that file.\n{% block object-tools-items %} \u0026lt;li\u0026gt; {% url \u0026#39;admin:post_export_excel\u0026#39; as export_url %} \u0026lt;a href=\u0026#34;{% append_get_params export_url %}\u0026#34; class=\u0026#34;downloadlink\u0026#34; \u0026gt; {% trans \u0026#34;Export to Excel\u0026#34; %} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% if has_add_permission %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;admin:my_post_add\u0026#39; %}\u0026#34; class=\u0026#34;addlink\u0026#34;\u0026gt;{% trans \u0026#34;Add\u0026#34; %}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endif %} {% endblock %} Combined with custom style, Here is the result\n"},{"id":3,"href":"/wiki/posts/redirect-url-after-update-django-model/","title":"Set redirect URL after updated Django model in admin","section":"Posts","content":"Currently if you do a filter or search in list view in admin in Django, after update a row in given list (Django will open edit page). After that model is updated, Django will redirect to list url without keep search or filter condition that you made before.\nHere is the solution to make Django redirect to previous list view url.\nFirstly, you need define own ChangeList.\nfrom jutil.admin import admin_obj_url from django.contrib.admin.views.main import ChangeList class MyChangeList(ChangeList): def __init__(self, request, *args): super().__init__(request, *args) self.current_url = request.get_full_path() # Store current url def url_for_result(self, result): return admin_obj_url(result) + \u0026#34;?next=\u0026#34; + mark_safe(self.current_url) # Add current url to next param when open update url. Next here is code in your model admin class.\nfrom django.contrib import admin from django.shortcuts import redirect class MyAdmin(admin.ModelAdmin): def get_changelist(self, request, **kwargs): return MyChangeList def response_post_save_change(self, request, obj): if \u0026#39;next\u0026#39; in request.GET: # Check if next is passed via url, redirect to previous url next_url = request.GET[\u0026#39;next\u0026#39;] return redirect(next_url) return super().response_post_save_change(request, obj) "},{"id":4,"href":"/wiki/posts/debugging-django-emails/","title":"Debugging Django emails","section":"Posts","content":"Run in terminal:\npython -m smtpd -n -c DebuggingServer localhost:1025 After that in Django\u0026rsquo;s settings.py:\nEMAIL_HOST = \u0026#39;localhost\u0026#39; EMAIL_HOST_PASSWORD = \u0026#39;\u0026#39; EMAIL_HOST_USER = \u0026#39;\u0026#39; EMAIL_PORT = 1025 EMAIL_USE_SSL = False Then you get all sent email contents printed to terminal:\n"},{"id":5,"href":"/wiki/docs/general/hello/","title":"Hello","section":"General","content":"Helllo #  Buttons are styled links that can lead to local page or external link.\nOverview #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  Step 1 #  This is content\nStep 2 #  This is content\n"}]